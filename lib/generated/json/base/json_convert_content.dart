// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

import 'package:pub_tran_exercise/core/models/locations_assigned_stops_entity.dart';
import 'package:pub_tran_exercise/core/models/locations_assigned_stops_parent_entity.dart';
import 'package:pub_tran_exercise/core/models/locations_assigned_stops_properties_entity.dart';
import 'package:pub_tran_exercise/core/models/locations_entity.dart';
import 'package:pub_tran_exercise/core/models/locations_parrent_entity.dart';
import 'package:pub_tran_exercise/core/models/locations_properties_entity.dart';
import 'package:pub_tran_exercise/core/models/search_entity.dart';
// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:pub_tran_exercise/core/models/system_messages_entity.dart';
import 'package:pub_tran_exercise/generated/json/locations_assigned_stops_entity_helper.dart';
import 'package:pub_tran_exercise/generated/json/locations_assigned_stops_parent_entity_helper.dart';
import 'package:pub_tran_exercise/generated/json/locations_assigned_stops_properties_entity_helper.dart';
import 'package:pub_tran_exercise/generated/json/locations_entity_helper.dart';
import 'package:pub_tran_exercise/generated/json/locations_parrent_entity_helper.dart';
import 'package:pub_tran_exercise/generated/json/locations_properties_entity_helper.dart';
import 'package:pub_tran_exercise/generated/json/search_entity_helper.dart';
import 'package:pub_tran_exercise/generated/json/system_messages_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case SystemMessagesEntity:
        return systemMessagesEntityFromJson(data as SystemMessagesEntity, json)
            as T;
      case LocationsAssignedStopsEntity:
        return locationsAssignedStopsEntityFromJson(
            data as LocationsAssignedStopsEntity, json) as T;
      case LocationsPropertiesEntity:
        return locationsPropertiesEntityFromJson(
            data as LocationsPropertiesEntity, json) as T;
      case LocationsParentEntity:
        return locationsParentEntityFromJson(
            data as LocationsParentEntity, json) as T;
      case LocationsAssignedStopsPropertiesEntity:
        return locationsAssignedStopsPropertiesEntityFromJson(
            data as LocationsAssignedStopsPropertiesEntity, json) as T;
      case SearchEntity:
        return searchEntityFromJson(data as SearchEntity, json) as T;
      case LocationsAssignedStopsParentEntity:
        return locationsAssignedStopsParentEntityFromJson(
            data as LocationsAssignedStopsParentEntity, json) as T;
      case LocationsEntity:
        return locationsEntityFromJson(data as LocationsEntity, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case SystemMessagesEntity:
        return systemMessagesEntityToJson(data as SystemMessagesEntity);
      case LocationsAssignedStopsEntity:
        return locationsAssignedStopsEntityToJson(
            data as LocationsAssignedStopsEntity);
      case LocationsPropertiesEntity:
        return locationsPropertiesEntityToJson(
            data as LocationsPropertiesEntity);
      case LocationsParentEntity:
        return locationsParentEntityToJson(data as LocationsParentEntity);
      case LocationsAssignedStopsPropertiesEntity:
        return locationsAssignedStopsPropertiesEntityToJson(
            data as LocationsAssignedStopsPropertiesEntity);
      case SearchEntity:
        return searchEntityToJson(data as SearchEntity);
      case LocationsAssignedStopsParentEntity:
        return locationsAssignedStopsParentEntityToJson(
            data as LocationsAssignedStopsParentEntity);
      case LocationsEntity:
        return locationsEntityToJson(data as LocationsEntity);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle<M>(json) {
    String type = M.toString();
    if (type == (SystemMessagesEntity).toString()) {
      return SystemMessagesEntity().fromJson(json);
    } else if (type == (LocationsAssignedStopsEntity).toString()) {
      return LocationsAssignedStopsEntity().fromJson(json);
    } else if (type == (LocationsPropertiesEntity).toString()) {
      return LocationsPropertiesEntity().fromJson(json);
    } else if (type == (LocationsParentEntity).toString()) {
      return LocationsParentEntity().fromJson(json);
    } else if (type == (LocationsAssignedStopsPropertiesEntity).toString()) {
      return LocationsAssignedStopsPropertiesEntity().fromJson(json);
    } else if (type == (SearchEntity).toString()) {
      return SearchEntity().fromJson(json);
    } else if (type == (LocationsAssignedStopsParentEntity).toString()) {
      return LocationsAssignedStopsParentEntity().fromJson(json);
    } else if (type == (LocationsEntity).toString()) {
      return LocationsEntity().fromJson(json);
    }
    return null;
  }

  //list is returned by type
  static M _getListChildType<M>(List data) {
    if (<SystemMessagesEntity>[] is M) {
      return data
          .map<SystemMessagesEntity>((e) => SystemMessagesEntity().fromJson(e))
          .toList() as M;
    } else if (<LocationsAssignedStopsEntity>[] is M) {
      return data
          .map<LocationsAssignedStopsEntity>(
              (e) => LocationsAssignedStopsEntity().fromJson(e))
          .toList() as M;
    } else if (<LocationsPropertiesEntity>[] is M) {
      return data
          .map<LocationsPropertiesEntity>(
              (e) => LocationsPropertiesEntity().fromJson(e))
          .toList() as M;
    } else if (<LocationsParentEntity>[] is M) {
      return data
          .map<LocationsParentEntity>(
              (e) => LocationsParentEntity().fromJson(e))
          .toList() as M;
    } else if (<LocationsAssignedStopsPropertiesEntity>[] is M) {
      return data
          .map<LocationsAssignedStopsPropertiesEntity>(
              (e) => LocationsAssignedStopsPropertiesEntity().fromJson(e))
          .toList() as M;
    } else if (<SearchEntity>[] is M) {
      return data.map<SearchEntity>((e) => SearchEntity().fromJson(e)).toList()
          as M;
    } else if (<LocationsAssignedStopsParentEntity>[] is M) {
      return data
          .map<LocationsAssignedStopsParentEntity>(
              (e) => LocationsAssignedStopsParentEntity().fromJson(e))
          .toList() as M;
    } else if (<LocationsEntity>[] is M) {
      return data
          .map<LocationsEntity>((e) => LocationsEntity().fromJson(e))
          .toList() as M;
    }
    throw Exception("not fond");
  }

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}
